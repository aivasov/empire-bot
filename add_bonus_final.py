# –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
with open('/home/bot/empire-bot/bot.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –±–æ–Ω—É—Å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –≤ handle_answer
handle_answer_addition = '''
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ä–µ–∂–∏–º
    if bonus_unlocked:
        available_bonus = None
        for bonus_block in bonus_blocks:
            if score >= bonus_block.get('min_score', 0):
                available_bonus = bonus_block
                break
        
        if available_bonus and bonus_answer_cnt < len(available_bonus.get("questions", [])):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π –æ—Ç–≤–µ—Ç
            bonus_question = available_bonus["questions"][bonus_answer_cnt]
            bonus_scores = bonus_question.get("scores", {"A": 1, "B": 2, "C": 3})
            score += bonus_scores.get(choice, 1)
            bonus_answer_cnt += 1
            
            save_user(uid, block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt)
            await m.answer(f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π –æ—Ç–≤–µ—Ç {choice} –ø—Ä–∏–Ω—è—Ç!")
            
            if bonus_answer_cnt < len(available_bonus["questions"]):
                await ask_bonus_question(uid, m.chat.id)
            else:
                kb_buttons = []
                btns = available_bonus.get("buttons", {})
                if btns.get("gift"):
                    kb_buttons.append([KeyboardButton(text="üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫")])
                if btns.get("site"):
                    kb_buttons.append([KeyboardButton(text="üåê –ë–æ–Ω—É—Å–Ω—ã–π —Å–∞–π—Ç")])
                if btns.get("contacts"):
                    kb_buttons.append([KeyboardButton(text="üìû –ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")])
                kb_buttons.append([KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")])
                
                kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True)
                await m.answer(f"üéâ –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω! –°—á—ë—Ç: {score}", reply_markup=kb)
            return
'''

# –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ handle_answer
content = content.replace(
    'logger.info(f"User {uid} answered {choice}")',
    'logger.info(f"User {uid} answered {choice}")' + handle_answer_addition
)

# –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ main
bonus_handlers = '''
@dp.message(F.text == "üéÅ –û—Ç–∫—Ä—ã—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")
async def unlock_bonus_block(m: types.Message):
    if not m.from_user:
        return
    
    uid = m.from_user.id
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    blocks, bonus_blocks = get_quiz()
    
    if not bonus_blocks:
        await m.answer("‚ùå –ë–æ–Ω—É—Å–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    available_bonus = None
    for bonus_block in bonus_blocks:
        if score >= bonus_block.get('min_score', 0):
            available_bonus = bonus_block
            break
    
    if not available_bonus:
        await m.answer(f"‚ùå –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤. –í–∞—à —Å—á—ë—Ç: {score}")
        return
    
    save_user(uid, block_idx, cnt, score, 1, 0, 0)
    
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üéÅ –ù–∞—á–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")]],
        resize_keyboard=True
    )
    
    await m.answer(
        f"üéâ –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\\n\\n{available_bonus.get('title', '–ë–æ–Ω—É—Å')}\\n\\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
        parse_mode="Markdown",
        reply_markup=kb
    )

@dp.message(F.text == "üéÅ –ù–∞—á–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")
async def start_bonus_quiz(m: types.Message):
    if not m.from_user:
        return
    await ask_bonus_question(m.from_user.id, m.chat.id)

async def ask_bonus_question(user_id: int, chat_id: int):
    blocks, bonus_blocks = get_quiz()
    if not bonus_blocks:
        await bot.send_message(chat_id, "‚ùå –ë–æ–Ω—É—Å–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(user_id)
    
    if not bonus_unlocked:
        await bot.send_message(chat_id, "‚ùå –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return
    
    available_bonus = None
    for bonus_block in bonus_blocks:
        if score >= bonus_block.get('min_score', 0):
            available_bonus = bonus_block
            break
    
    if not available_bonus:
        await bot.send_message(chat_id, "‚ùå –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    questions = available_bonus.get("questions", [])
    
    if bonus_answer_cnt >= len(questions):
        kb_buttons = []
        btns = available_bonus.get("buttons", {})
        if btns.get("gift"):
            kb_buttons.append([KeyboardButton(text="üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫")])
        if btns.get("site"):
            kb_buttons.append([KeyboardButton(text="üåê –ë–æ–Ω—É—Å–Ω—ã–π —Å–∞–π—Ç")])
        if btns.get("contacts"):
            kb_buttons.append([KeyboardButton(text="üìû –ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")])
        kb_buttons.append([KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")])
        
        kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True)
        await bot.send_message(chat_id, f"üéâ –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!\\n–°—á—ë—Ç: {score}", reply_markup=kb)
        return
    
    question = questions[bonus_answer_cnt]
    options = question.get("options", {})
    
    text = f"üéÅ *{available_bonus.get('title', '–ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫')}*\\n\\n"
    text += f"‚ùì *–í–æ–ø—Ä–æ—Å {bonus_answer_cnt + 1} –∏–∑ {len(questions)}*\\n\\n"
    text += f"{question.get('text', '')}\\n\\n"
    text += f"üÖ∞ {options.get('A', '–í–∞—Ä–∏–∞–Ω—Ç A')}\\n\\n"
    text += f"üÖ± {options.get('B', '–í–∞—Ä–∏–∞–Ω—Ç B')}\\n\\n"
    text += f"üÖ≤ {options.get('C', '–í–∞—Ä–∏–∞–Ω—Ç C')}"
    
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="A"), KeyboardButton(text="B"), KeyboardButton(text="C")]],
        resize_keyboard=True
    )
    
    await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=kb)

'''

# –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ main
content = content.replace('if __name__ == "__main__":', bonus_handlers + 'if __name__ == "__main__":')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–ª–æ–∫–∞ –≤ ask_question
bonus_button_addition = '''        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–ª–æ–∫–∞
        if bonus_blocks and not bonus_unlocked:
            for bonus_block in bonus_blocks:
                if score >= bonus_block.get("min_score", 0):
                    kb_buttons.append([KeyboardButton(text="üéÅ –û—Ç–∫—Ä—ã—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")])
                    break
'''

content = content.replace(
    'kb_buttons.append([KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")])',
    bonus_button_addition + '        kb_buttons.append([KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")])'
)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
with open('/home/bot/empire-bot/bot.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("‚úÖ –ë–æ–Ω—É—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
