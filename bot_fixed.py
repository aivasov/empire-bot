@dp.message(F.text.in_(["A", "B", "C"]))
async def handle_answer(m: types.Message):
    if not m.from_user:
        return
    
    uid = m.from_user.id
    choice = m.text
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    blocks, bonus_blocks = get_quiz()
    
    logger.info(f"User {uid} answered {choice}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏
    if not blocks or block_idx >= len(blocks):
        return await m.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    questions = blocks[block_idx]["questions"]
    if cnt >= len(questions):
        return await m.answer("‚ùå –ë–ª–æ–∫ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω")

    question = questions[cnt]
    scores = question.get("scores", {"A": 1, "B": 2, "C": 3})
    score += scores.get(choice, 1)
    cnt += 1

    save_user(uid, block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt)
    await m.answer(f"‚úÖ –û—Ç–≤–µ—Ç {choice} –ø—Ä–∏–Ω—è—Ç!")

    if cnt < len(questions):
        await ask_question(uid, m.chat.id)
        return

    # –ó–∞–≤–µ—Ä—à–∏–ª–∏ –±–ª–æ–∫
    next_idx = block_idx + 1
    save_user(uid, next_idx, 0, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt)

    kb_buttons = []
    if next_idx < len(blocks):
        kb_buttons.append([KeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫")])

    btns = blocks[block_idx].get("buttons", {})
    if btns.get("gift"):
        kb_buttons.append([KeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫")])
    if btns.get("site"):
        kb_buttons.append([KeyboardButton(text="üåê –°–∞–π—Ç")])
    if btns.get("contacts"):
        kb_buttons.append([KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")])

    kb_buttons.append([KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")])
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True)

    await m.answer(f"üéâ –ë–ª–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Å—á—ë—Ç: {score} –±–∞–ª–ª–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@dp.message(F.text == "–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫")
async def next_block(m: types.Message):
    if not m.from_user:
        return
    await ask_question(m.from_user.id, m.chat.id)

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(m: types.Message):
    if not m.from_user:
        return
    uid = m.from_user.id
    _, _, score, _, _, _ = get_user(uid)
    await m.answer(f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: {PROFILE_URL}\nüíØ –í–∞—à —Å—á—ë—Ç: {score} –±–∞–ª–ª–æ–≤")

@dp.message(F.text == "üåê –°–∞–π—Ç")
async def site(m: types.Message):
    await m.answer(f"üåê –ù–∞—à —Å–∞–π—Ç: {SITE_URL}")

@dp.message(F.text.in_(["üéÅ –ü–æ–¥–∞—Ä–æ–∫", "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"]))
async def gift(m: types.Message):
    if not m.from_user:
        return
    uid = m.from_user.id
    block_idx, _, _, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    blocks, bonus_blocks = get_quiz()

    # –û–±—ã—á–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
    if block_idx > 0:
        prev = min(block_idx - 1, len(blocks) - 1)
        url = blocks[prev].get("buttons", {}).get("gift", "")
        if url:
            return await m.answer(f"üéÅ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫: {url}")

    await m.answer("üéÅ –ü–æ–¥–∞—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(m: types.Message):
    if not m.from_user:
        return
    uid = m.from_user.id
    block_idx, _, _, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    blocks, bonus_blocks = get_quiz()

    # –û–±—ã—á–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    if block_idx > 0:
        prev = min(block_idx - 1, len(blocks) - 1)
        url = blocks[prev].get("buttons", {}).get("contacts", "")
        if url:
            return await m.answer(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {url}")

    await m.answer("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

@dp.message()
async def fallback(m: types.Message):
    await m.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")

async def main():
    try:
        logger.info("Starting bot...")
        blocks, bonus_blocks = get_quiz()
        logger.info(f"Bot starting with {len(blocks)} blocks and {len(bonus_blocks)} bonus blocks")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error: {e}")
        raise
    finally:
        conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –±–ª–æ–∫–æ–≤
@dp.message(F.text == "üéÅ –û—Ç–∫—Ä—ã—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")
async def unlock_bonus_block(m: types.Message):
    if not m.from_user:
        return
    
    uid = m.from_user.id
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    blocks, bonus_blocks = get_quiz()
    
    logger.info(f"User {uid} wants to unlock bonus block. Score: {score}")
    
    if not bonus_blocks:
        await m.answer("‚ùå –ë–æ–Ω—É—Å–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–æ–Ω—É—Å–Ω—ã–º –±–ª–æ–∫–∞–º
    available_bonus = None
    for bonus_block in bonus_blocks:
        min_score = bonus_block.get('min_score', 0)
        if score >= min_score:
            available_bonus = bonus_block
            break
    
    if not available_bonus:
        await m.answer(f"‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ–Ω—É—Å–Ω–æ–º—É –±–ª–æ–∫—É –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤.\n–í–∞—à —Å—á—ë—Ç: {score}")
        return
    
    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫
    save_user(uid, block_idx, cnt, score, 1, 0, 0)  # bonus_unlocked = 1
    
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üéÅ –ù–∞—á–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")]],
        resize_keyboard=True
    )
    
    await m.answer(
        f"üéâ –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"üìã *{available_bonus.get('title', '–ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫')}*\n\n"
        f"–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
        parse_mode="Markdown",
        reply_markup=kb
    )

@dp.message(F.text == "üéÅ –ù–∞—á–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")
async def start_bonus_quiz(m: types.Message):
    if not m.from_user:
        return
    await ask_bonus_question(m.from_user.id, m.chat.id)

async def ask_bonus_question(user_id: int, chat_id: int):
    logger.info(f"Asking bonus question for user {user_id}")
    
    blocks, bonus_blocks = get_quiz()
    if not bonus_blocks:
        await bot.send_message(chat_id, "‚ùå –ë–æ–Ω—É—Å–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫
    if not bonus_unlocked:
        await bot.send_message(chat_id, "‚ùå –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫
    available_bonus = None
    for bonus_block in bonus_blocks:
        min_score = bonus_block.get('min_score', 0)
        if score >= min_score:
            available_bonus = bonus_block
            break
    
    if not available_bonus:
        await bot.send_message(chat_id, "‚ùå –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    questions = available_bonus.get("questions", [])
    
    # –ï—Å–ª–∏ –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω
    if bonus_answer_cnt >= len(questions):
        kb_buttons = []
        btns = available_bonus.get("buttons", {})
        if btns.get("gift"):
            kb_buttons.append([KeyboardButton(text="üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫")])
        if btns.get("site"):
            kb_buttons.append([KeyboardButton(text="üåê –ë–æ–Ω—É—Å–Ω—ã–π —Å–∞–π—Ç")])
        if btns.get("contacts"):
            kb_buttons.append([KeyboardButton(text="üìû –ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")])
        kb_buttons.append([KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")])
        
        kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True)
        await bot.send_message(
            chat_id, 
            f"üéâ –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {score} –±–∞–ª–ª–æ–≤",
            reply_markup=kb
        )
        return
    
    question = questions[bonus_answer_cnt]
    options = question.get("options", {})
    
    text = f"üéÅ *{available_bonus.get('title', '–ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫')}*\n\n"
    text += f"‚ùì *–ë–æ–Ω—É—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å {bonus_answer_cnt + 1} –∏–∑ {len(questions)}*\n\n"
    text += f"{question.get('text', '')}\n\n"
    text += f"üÖ∞ {options.get('A', '–í–∞—Ä–∏–∞–Ω—Ç A')}\n\n"
    text += f"üÖ± {options.get('B', '–í–∞—Ä–∏–∞–Ω—Ç B')}\n\n"
    text += f"üÖ≤ {options.get('C', '–í–∞—Ä–∏–∞–Ω—Ç C')}"
    
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="A"), KeyboardButton(text="B"), KeyboardButton(text="C")]],
        resize_keyboard=True
    )
    
    await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫")
async def bonus_gift(m: types.Message):
    if not m.from_user:
        return
    
    uid = m.from_user.id
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    blocks, bonus_blocks = get_quiz()
    
    if not bonus_unlocked or not bonus_blocks:
        await m.answer("üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫
    for bonus_block in bonus_blocks:
        min_score = bonus_block.get('min_score', 0)
        if score >= min_score:
            url = bonus_block.get("buttons", {}).get("gift", "")
            if url:
                await m.answer(f"üéÅ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫: {url}")
                return
    
    await m.answer("üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@dp.message(F.text == "üåê –ë–æ–Ω—É—Å–Ω—ã–π —Å–∞–π—Ç")
async def bonus_site(m: types.Message):
    if not m.from_user:
        return
    
    uid = m.from_user.id
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    blocks, bonus_blocks = get_quiz()
    
    if not bonus_unlocked or not bonus_blocks:
        await m.answer("üåê –ë–æ–Ω—É—Å–Ω—ã–π —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    for bonus_block in bonus_blocks:
        min_score = bonus_block.get('min_score', 0)
        if score >= min_score:
            url = bonus_block.get("buttons", {}).get("site", "")
            if url:
                await m.answer(f"üåê –ë–æ–Ω—É—Å–Ω—ã–π —Å–∞–π—Ç: {url}")
                return
    
    await m.answer("üåê –ë–æ–Ω—É—Å–Ω—ã–π —Å–∞–π—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

@dp.message(F.text == "üìû –ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def bonus_contacts(m: types.Message):
    if not m.from_user:
        return
    
    uid = m.from_user.id
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    blocks, bonus_blocks = get_quiz()
    
    if not bonus_unlocked or not bonus_blocks:
        await m.answer("üìû –ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    for bonus_block in bonus_blocks:
        min_score = bonus_block.get('min_score', 0)
        if score >= min_score:
            url = bonus_block.get("buttons", {}).get("contacts", "")
            if url:
                await m.answer(f"üìû –ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {url}")
                return
    
    await m.answer("üìû –ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)