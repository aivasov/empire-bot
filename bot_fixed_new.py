import os
import json
import sqlite3
import logging
import traceback
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PROFILE_URL = os.getenv("PROFILE_URL", "https://t.me/your_profile")
SITE_URL = os.getenv("SITE_URL", "https://your.site")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# –ü—É—Ç–∏
DATA_DIR = os.path.join(os.getcwd(), "data")
DATA_PATH = os.path.join(DATA_DIR, "questions.json")
DB_PATH = os.path.join(DATA_DIR, "quiz_users.db")
os.makedirs(DATA_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS progress (
    user_id INTEGER PRIMARY KEY,
    block_idx INTEGER DEFAULT 0,
    answer_cnt INTEGER DEFAULT 0,
    score INTEGER DEFAULT 0,
    bonus_unlocked INTEGER DEFAULT 0,
    bonus_block_idx INTEGER DEFAULT 0,
    bonus_answer_cnt INTEGER DEFAULT 0
)
""")
conn.commit()


def get_quiz():
    try:
        with open(DATA_PATH, encoding="utf-8") as f:
            data = json.load(f)
        return data.get("blocks", []), data.get("bonus_blocks", [])
    except Exception as e:
        logger.error(f"Failed to load quiz data: {e}\n{traceback.format_exc()}")
        return [], []


def get_user(uid: int):
    cursor.execute(
        "SELECT block_idx, answer_cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt "
        "FROM progress WHERE user_id = ?", (uid,)
    )
    row = cursor.fetchone()
    if row:
        return list(row)
    cursor.execute("INSERT INTO progress(user_id) VALUES(?)", (uid,))
    conn.commit()
    return [0, 0, 0, 0, 0, 0]


def save_user(uid: int, block_idx: int, answer_cnt: int, score: int,
              bonus_unlocked: int = 0, bonus_block_idx: int = 0, bonus_answer_cnt: int = 0):
    cursor.execute("""
        UPDATE progress SET
          block_idx = ?, answer_cnt = ?, score = ?,
          bonus_unlocked = ?, bonus_block_idx = ?, bonus_answer_cnt = ?
        WHERE user_id = ?
    """, (block_idx, answer_cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt, uid))
    conn.commit()


def check_bonus_unlock(score: int, bonus_blocks: list) -> bool:
    return any(score >= b.get("min_score", 0) for b in bonus_blocks)


@dp.message(Command("start"))
async def cmd_start(m: types.Message):
    uid = m.from_user and m.from_user.id
    if not uid:
        return
    save_user(uid, 0, 0, 0, 0, 0, 0)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å")]],
        resize_keyboard=True
    )
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É? –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª", reply_markup=kb)


@dp.message(F.text == "–ù–∞—á–∞—Ç—å")
async def start_quiz(m: types.Message):
    await ask_question(m.from_user.id, m.chat.id)


async def ask_question(uid: int, chat_id: int):
    blocks, bonus_blocks = get_quiz()
    block_idx, cnt, score, bonus_unlocked, _, _ = get_user(uid)

    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–æ–Ω—É—Å —Å—Ä–∞–∑—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
    if not bonus_unlocked and check_bonus_unlock(score, bonus_blocks):
        save_user(uid, block_idx, cnt, score, 1, 0, 0)
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üéÅ –û—Ç–∫—Ä—ã—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")]],
            resize_keyboard=True
        )
        return await bot.send_message(
            chat_id,
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –±–∞–ª–ª–æ–≤ –∏ –æ—Ç–∫—Ä—ã–ª–∏ –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫!",
            reply_markup=kb
        )

    # –ï—Å–ª–∏ –µ—â—ë –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –±–ª–æ–∫–∏
    if block_idx < len(blocks):
        block = blocks[block_idx]
        questions = block.get("questions", [])

        # –ï—Å–ª–∏ –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
        if cnt < len(questions):
            q = questions[cnt]
            opts = q.get("options", {})
            text = (
                f"üìã *{block.get('title','')}*\n\n"
                f"‚ùì –ë–ª–æ–∫ {block_idx+1}/{len(blocks)}, –≤–æ–ø—Ä–æ—Å {cnt+1}/{len(questions)}\n\n"
                f"{q.get('text','')}\n\n"
                f"üÖ∞Ô∏è {opts.get('A','')}\n"
                f"üÖ±Ô∏è {opts.get('B','')}\n"
                f"üÖ≤ {opts.get('C','')}"
            )
            kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="A"), KeyboardButton(text="B"), KeyboardButton(text="C")]],
                resize_keyboard=True
            )
            return await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=kb)

        # –ï—Å–ª–∏ –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫¬ª –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        buttons = block.get("buttons", {})
        kb_buttons = []
        if block_idx + 1 < len(blocks):
            kb_buttons.append([KeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫")])
        if buttons.get("gift"):
            kb_buttons.append([KeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫")])
        if buttons.get("site"):
            kb_buttons.append([KeyboardButton(text="üåê –°–∞–π—Ç")])
        if buttons.get("contacts"):
            kb_buttons.append([KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")])
        kb_buttons.append([KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")])
        kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True)
        return await bot.send_message(
            chat_id,
            f"‚úÖ –ë–ª–æ–∫ {block_idx+1} –∏–∑ {len(blocks)} –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Å—á—ë—Ç: {score}",
            reply_markup=kb
        )

    # –í—Å–µ –æ–±—ã—á–Ω—ã–µ –±–ª–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]],
        resize_keyboard=True
    )
    await bot.send_message(chat_id, f"üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {score}", reply_markup=kb)


@dp.message(F.text.in_(["A", "B", "C"]))
async def handle_answer(m: types.Message):
    uid = m.from_user.id
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    blocks, bonus_blocks = get_quiz()

    # –û—Ç–≤–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º –±–ª–æ–∫–µ
    if block_idx < len(blocks):
        q = blocks[block_idx]["questions"][cnt]
        score += q.get("scores", {}).get(m.text, 0)
        cnt += 1
        save_user(uid, block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt)
        await m.answer(f"‚úÖ –û—Ç–≤–µ—Ç {m.text} –ø—Ä–∏–Ω—è—Ç!")
        return await ask_question(uid, m.chat.id)

    # –û—Ç–≤–µ—Ç –≤ –±–æ–Ω—É—Å–Ω–æ–º –±–ª–æ–∫–µ
    if bonus_unlocked and block_idx >= len(blocks):
        return await ask_bonus_question(uid, m.chat.id)

    await m.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é")


@dp.message(F.text == "–°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫")
async def next_block(m: types.Message):
    uid = m.from_user.id
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    save_user(uid, block_idx + 1, 0, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt)
    await ask_question(uid, m.chat.id)


@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(m: types.Message):
    _, _, score, _, _, _ = get_user(m.from_user.id)
    await m.answer(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {PROFILE_URL}\nüíØ –°—á—ë—Ç: {score} –±–∞–ª–ª–æ–≤")


@dp.message(F.text == "üåê –°–∞–π—Ç")
async def site(m: types.Message):
    await m.answer(f"üåê –ù–∞—à —Å–∞–π—Ç: {SITE_URL}")


@dp.message(F.text.in_(["üéÅ –ü–æ–¥–∞—Ä–æ–∫", "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"]))
async def gift(m: types.Message):
    uid = m.from_user.id
    block_idx, _, _, _, _, _ = get_user(uid)
    blocks, _ = get_quiz()
    if block_idx > 0:
        prev = min(block_idx - 1, len(blocks) - 1)
        url = blocks[prev].get("buttons", {}).get("gift", "")
        if url:
            return await m.answer(f"üéÅ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫: {url}")
    await m.answer("üéÅ –ü–æ–¥–∞—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(m: types.Message):
    uid = m.from_user.id
    block_idx, _, _, _, _, _ = get_user(uid)
    blocks, _ = get_quiz()
    if block_idx > 0:
        prev = min(block_idx - 1, len(blocks) - 1)
        url = blocks[prev].get("buttons", {}).get("contacts", "")
        if url:
            return await m.answer(f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {url}")
    await m.answer("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")


@dp.message(F.text == "üéÅ –û—Ç–∫—Ä—ã—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")
async def open_bonus(m: types.Message):
    await ask_bonus_question(m.from_user.id, m.chat.id)


        return await bot.send_message(
            chat_id,
            f"üéâ –í—Å–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {score}",
            reply_markup=kb
        )
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]],
            resize_keyboard=True
        )
        return await bot.send_message(chat_id, f"üéâ –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω! –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {score}", reply_markup=kb)

    block = bonus_blocks[b_block_idx]
    questions = block.get("questions", [])

    if b_ans_cnt < len(questions):
        q = questions[b_ans_cnt]
        opts = q.get("options", {})
        text = (
            f"üéÅ *{block.get('title','')}*\n\n"
            f"{q.get('text','')}\n\n"
            f"üÖ∞Ô∏è {opts.get('A','')}\n"
            f"üÖ±Ô∏è {opts.get('B','')}\n"
            f"üÖ≤ {opts.get('C','')}"
        )
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="A"), KeyboardButton(text="B"), KeyboardButton(text="C")]],
            resize_keyboard=True
        )
        return await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=kb)

    save_user(uid, len(get_quiz()[0]), 0, score, 1, b_block_idx + 1, 0)
    return await ask_bonus_question(uid, chat_id)


@dp.message()
async def fallback(m: types.Message):
    await m.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é")


async def main():
    logger.info("Starting bot‚Ä¶")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    conn.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
async def ask_bonus_question(uid: int, chat_id: int):
    _, bonus_blocks = get_quiz()
    _, _, score, _, b_block_idx, b_ans_cnt = get_user(uid)
    
    # –ï—Å–ª–∏ –≤—Å–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–ª–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    if b_block_idx >= len(bonus_blocks):
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]],
            resize_keyboard=True
        )
        return await bot.send_message(
            chat_id, 
            f"üéâ –í—Å–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ò—Ç–æ–≥–æ–≤—ã–π —Å—á—ë—Ç: {score}", 
            reply_markup=kb
        )
    
    block = bonus_blocks[b_block_idx]
    questions = block.get("questions", [])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–º –±–æ–Ω—É—Å–Ω–æ–º –±–ª–æ–∫–µ
    if b_ans_cnt < len(questions):
        q = questions[b_ans_cnt]
        opts = q.get("options", {})
        text = (
            f"üéÅ *{block.get('title','')}*\n\n"
            f"‚ùì –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ {b_block_idx+1}/{len(bonus_blocks)}, –≤–æ–ø—Ä–æ—Å {b_ans_cnt+1}/{len(questions)}\n\n"
            f"{q.get('text','')}\n\n"
            f"üÖ∞ {opts.get('A','')}\n"
            f"üÖ± {opts.get('B','')}\n"
            f"üÖ≤ {opts.get('C','')}"
        )
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="A"), KeyboardButton(text="B"), KeyboardButton(text="C")]],
            resize_keyboard=True
        )
        return await bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=kb)
    
    # –¢–µ–∫—É—â–∏–π –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω
    buttons = block.get("buttons", {})
    kb_buttons = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫
    if b_block_idx + 1 < len(bonus_blocks):
        next_bonus = bonus_blocks[b_block_idx + 1]
        if score >= next_bonus.get("min_score", 0):
            kb_buttons.append([KeyboardButton(text="üéÅ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
    if buttons.get("gift"):
        kb_buttons.append([KeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫")])
    if buttons.get("site"):
        kb_buttons.append([KeyboardButton(text="üåê –°–∞–π—Ç")])
    if buttons.get("contacts"):
        kb_buttons.append([KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")])
    
    kb_buttons.append([KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")])
    
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True)
    
    await bot.send_message(
        chat_id,
        f"‚úÖ –ë–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫ {b_block_idx+1} –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Å—á—ë—Ç: {score}",
        reply_markup=kb
    )

@dp.message(F.text == "üéÅ –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å–Ω—ã–π –±–ª–æ–∫")
async def next_bonus_block(m: types.Message):
    uid = m.from_user.id
    block_idx, cnt, score, bonus_unlocked, bonus_block_idx, bonus_answer_cnt = get_user(uid)
    save_user(uid, block_idx, cnt, score, bonus_unlocked, bonus_block_idx + 1, 0)
    await ask_bonus_question(uid, m.chat.id)
